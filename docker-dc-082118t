# ----------------------------------------
# initial setup of development environment
# ----------------------------------------


# install git, docker and kube
sudo apt-get install git docker


# create a directory
mkdir experiment-docker-datacenter

# copies the files from the remote repo to your local directory
git clone https://github.com/josephtrohak/experiment-docker-datacenter.git

# set up your credentials
git config --global user.email "fn.ln@gmail.com"

# Initialize the local directory as a Git repository.
git init

# Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.
git add .

git commit -m "First commit"

# git remote add origin remote repository URL
# Sets the new remote
git remote add origin https://github.com/josephtrohak/experiment-docker-datacenter.git

# Verifies the new remote URL
git remote -v

# Pushes the changes in your local repository up to the remote repository you specified as the origin
git push origin master

# after every change
git add .
git commit -m "date and comment"
git remote -v
git push origin master



# login to your docker environment
sudo docker login -u userid -p password

# when ready to begin deploying production docker images
# install kubernetes
# https://www.techrepublic.com/article/how-to-quickly-install-kubernetes-on-ubuntu/
sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add 
deb http://apt.kubernetes.io/ kubernetes-xenial main 
apt-get update
apt-get install -y kubelet kubeadm kubectl kubernetes-cni


# ----------------------------------------
# experiment 
# create an ubuntu server with a specific ipaddress
# ----------------------------------------
# First you need to create you own docker network (mynet123)
docker network create --subnet=172.18.0.0/16 mynet123
# than simply run the image (I'll take ubuntu as example)
docker run --net mynet123 --ip 172.18.0.22 -it ubuntu bash
ip addr
sudo docker network rm mynet123


# then in ubuntu shell
ip addr
# Additionally you could use
# --hostname to specify a hostname
# --add-host to add more entries to /etc/hosts
# Docs (and why you need to create a network) at https://docs.docker.com/engine/reference/commandline/network_create/

# ----------------------------------------
# experiment 
# create an ubuntu server with a specific hostname
# ----------------------------------------

sudo docker run -h tester.meruslab.org -i -t ubuntu bash

docker run -h foo.bar.baz -i -t ubuntu bash
# runs a container with the hostname foo with the fqdn .bar.baz
#
root@foo:/# hostname
foo
root@foo:/# hostname -d
bar.baz
root@foo:/# hostname -f
foo.bar.baz

# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# crashplan headless
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

# to update
docker pull jrcs/crashplan
https://hub.docker.com/r/jrcs/crashplan/

docker run -d \
    --name=crashplan \
    -p 5800:5800 \
    -v /docker/appdata/crashplan:/config:rw \
    -v $HOME:/storage:ro \
    jlesage/crashplan

docker run -d \
    --name=crashplan \
    -p 5900:5900 \
    -v /docker/appdata/crashplan:/config:rw \
    -v $HOME:/storage:ro \
    jlesage/crashplan

sudo docker run -d -p 5800:5800 --name=crashplan -v /home/merus/Desktop/experiment-docker-datacenter/docker/crashplan-headless:/config:rw -v $HOME:/storage:ro josephtrohak/merus-crashplan

sudo docker run -d --name=crashplan -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/experiment-docker-datacenter/docker/crashplan-headless:/config:rw -v /home/merus/Desktop:/storage:ro josephtrohak/merus-crashplan

#prod
sudo docker run -d --name=crashplan -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/storage:ro josephtrohak/merus-crashplan

#prod - backup seemed slow, changing from bridge network to host (doesnt work.. sigh)
sudo docker run --net=host -d --name=crashplan -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/storage:ro josephtrohak/merus-crashplan

#prod
sudo docker run -d --name=crashplan --restart=on-failure:10 -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/media:ro josephtrohak/merus-crashplan

sudo docker run -d --name=crashplan --restart=on-failure:10 -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/media:ro jlesage/crashplan

# added ntp time sync
sudo docker run -d --name=crashplan --restart=on-failure:10 -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/media:ro -v /etc/localtime:/etc/localtime:ro jlesage/crashplan

# docker pull
# docker pull jlesage/crashplan-pro
# migration to crashplan-pro
sudo docker run -d --name=crashplan-pro --restart=on-failure:10 -p 5800:5800 --memory=1024MB --cpus=1 -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/media:ro -v /etc/localtime:/etc/localtime:ro jlesage/crashplan-pro

# working time setting
# https://github.com/jlesage/docker-crashplan-pro/blob/master/README.md#environment-variables
# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
#
sudo docker run -d --name=crashplan-pro --restart=on-failure:10 -p 5800:5800 --memory=1024MB --cpus=1 -e "SET_CONTAINER_TIMEZONE=true" -e "CONTAINER_TIMEZONE=US/New_York" -v /home/merus/Desktop/downloads/docker/crashplan:/config:rw -v /media/backup/backup:/media:ro -e TZ="America/Toronto" jlesage/crashplan-pro

# ----------------------------------------
# experiment seven
# create specific images from base ubuntu images 
# portainer docker conainer gui
# 
# ----------------------------------------

https://portainer.io/install.html

# original
# docker volume create portainer_data
# docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

# docker pull portainer/portainer
# sudo docker run -d -p 9000:9000 --name=portainer --restart=on-failure:10  --memory=128MB --cpus=1 -v /var/run/docker.sock:/var/run/docker.sock -v /home/merus/Desktop/downloads/docker/portainer:/data:rw -v /etc/localtime:/etc/localtime:ro

# works
docker run -d -p 9000:9000 --name=portainer --memory=128MB --restart=on-failure:10 -v /var/run/docker.sock:/var/run/docker.sock -v /home/merus/Desktop/downloads/docker/portainer:/data portainer/portainer -v /etc/localtime:/etc/localtime:ro

# works

sudo docker run -d -p 9000:9000 --name=portainer --memory=32MB -v /var/run/docker.sock:/var/run/docker.sock -v /home/merus/Desktop/downloads/docker/portainer:/data portainer/portainer

# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# plex server
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

# to update
docker pull plexinc/pms-docker


# docker run -d --name plex --network=host -e TZ="<timezone>" -e PLEX_CLAIM="<claimToken>" -v <path/to/plex/database>:/config -v <path/to/transcode/temp>:/transcode -v <path/to/media>:/data plexinc/pms-docker

# sudo docker run -d --name plex --network=host -e TZ="<timezone>" -e PLEX_CLAIM="<claimToken>" -v /home/merus/Desktop/downloads/docker/plex/config:/config -v /home/merus/Desktop/downloads/docker/plex/transcode:/transcode -v /media/backup/backup/media:/data plexinc/pms-docker

#prod
# sudo docker run -d --name plex --network=host -e TZ="<timezone>" -e PLEX_CLAIM="<claimToken>" -v /home/merus/Desktop/downloads/docker/plex/config:/config -v /home/merus/Desktop/downloads/docker/plex/transcode:/transcode -v /media/backup/backup/media:/data plexinc/pms-docker

#prod final
sudo docker run -d --name plex --restart=on-failure:10 --network=host --memory=1024MB --cpus=2 -e TZ="<timezone>" -e PLEX_CLAIM="<claimToken>" -v /home/merus/Desktop/downloads/docker/plex/config:/config -v /home/merus/Desktop/downloads/docker/plex/transcode:/transcode -v /media/backup/backup/media:/data plexinc/pms-docker

# added advertise flag to enable remote access
# -e ADVERTISE_IP="http://<hostIPAddress>:32400/"
sudo docker run -d --name plex --restart=on-failure:10 --network=host --memory=1024MB --cpus=2 -e TZ="<timezone>" -e PLEX_CLAIM="<claimToken>" -e ADVERTISE_IP="http://13.0.0.2:32400/" -v /home/merus/Desktop/downloads/docker/plex/config:/config -v /home/merus/Desktop/downloads/docker/plex/transcode:/transcode -v /media/backup/backup/media:/data plexinc/pms-docker


# access via http://localhost:32400/web


# /var/crashplan: where the configuration files and logs are store
# /storage: where backup files are store
# Access the GUI from your desktop crashplan application
# Make a backup of the current .ui_info file of your desktop machine locate:
# On Linux: /var/crashplan/data/id/.ui_info
# On OSX: /Library/Application Support/CrashPlan/.ui_info
# On Windows: C:\ProgramData\CrashPlan\.ui_info
# Replace your .ui_info file of your desktop machine with the one of the crashplan container: /srv/crashplan/data/id/.ui_info.
# In the .ui_info file of your desktop machine, replace the IP (should be 0.0.0.0 or 127.0.0.1) # with the IP of your docker host.
# Make sure you can connect to ports 4242 and 4243 on your docker host.
# Start your local CrashPlan GUI.

# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# TFTP server for PXE
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

# presumes setting in additional DNSMASQ setups as follows
# dhcp-boot=pxelinux.0,tftp-servername,tftp-server-ipaddress
# dhcp-boot=pxelinux.0,merus-HP-EliteBook-2570p,13.0.0.141
# dhcp-boot=pxelinux.0,merus-HP-EliteBook-8470p,13.0.0.2

# download the netboot from debian website
# https://www.debian.org/distrib/netinst#netboot
# or the kali linux netboot images
# https://kali.training/topic/installing-kali-over-the-network/

# https://hub.docker.com/r/jumanjiman/tftp-hpa/
# docker pull jumanjiman/tftp-hpa

docker run -d -p 69:69/udp jumanjiman/tftp-hpa

docker run -d -p 69:69/udp -v /path/to/your/pxelinux.cfg:/tftpboot/pxelinux.cfg:ro jumanjiman/tftp-hpa
docker run -d -p 69:69/udp -v /home/merus/Desktop/experiment-docker-datacenter/pxe-tftp/netboot/pxelinux.cfg:/tftpboot/pxelinux.cfg:ro --name tftp jumanjiman/tftp-hpa
docker run -d -p 69:69/udp -v /home/merus/Desktop/experiment-docker-datacenter/pxe-tftp/netboot/debian-installer/amd64/pxelinux.cfg:/tftpboot/pxelinux.cfg:ro --name tftp jumanjiman/tftp-hpa

docker run -d -p 69:69/udp -v /home/merus/Desktop/downloads/docker/tftp/pxelinux.cfg:/tftpboot/pxelinux.cfg:ro --name tftp jumanjiman/tftp-hpa


docker run -p 0.0.0.0:69:69/udp -v /var/tftpboot:/var/tftpboot -i -t pghalliday/tftp
docker run -d -p 0.0.0.0:69:69/udp -v /home/merus/Desktop/downloads/docker/tftp:/var/tftpboot:ro --name tftp pghalliday/tftp



-v /home/merus/Desktop/downloads/docker/tftp/config:/config

/home/merus/Desktop/experiment-docker-datacenter/pxe-tftp/netboot

PROD
sudo docker run -d -p 69:69/udp --name tftp jumanjiman/tftp-hpa

PROD WORKS!
# copy netboot.gz to docker host.. then unzip
# restart docker container
sudo docker run -d -p 0.0.0.0:69:69/udp -v /home/merus/Desktop/downloads/docker/tftp:/var/tftpboot:ro --name tftp pghalliday/tftp


# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# aws-cli container
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

# OLD docker pull fstab/aws-cli
# OLD https://hub.docker.com/r/fstab/aws-cli/

https://hub.docker.com/r/garland/aws-cli-docker/


Return a list of items in s3 bucket
docker run \
--env AWS_ACCESS_KEY_ID=<<YOUR_ACCESS_KEY>> \
--env AWS_SECRET_ACCESS_KEY=<<YOUR_SECRET_ACCESS>> \
garland/aws-cli-docker \
aws s3 ls
output:

2014-06-03 19:41:30 folder1
2014-06-06 23:02:29 folder2



# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# dosbox
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

https://hub.docker.com/r/tudorh/dosbox/

https://hub.docker.com/r/tudorh/dosbox/


 docker run -ti \
         --env=DISPLAY=unix$DISPLAY \
         -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
         --env=USER_UID=$USER_UID \
         --env=USER_GID=$USER_GID \
         -v /dev/shm:/dev/shm \
         -v $HOME/.config/pulse:/home/gamer/.config/pulse:ro \
         -v /run/user/$USER_UID/pulse:/run/pulse:ro \
         -v $HOME/dosbox:/dosbox \
         --name dosbox \
         tudorh/dosbox:hostpulse

sudo docker run -ti \
         --env=DISPLAY=unix$DISPLAY \
         -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
         --env=USER_UID=$USER_UID \
         --env=USER_GID=$USER_GID \
         -v /dev/shm:/dev/shm \
         -v $HOME/.config/pulse:/home/gamer/.config/pulse:ro \
         -v /run/user/$USER_UID/pulse:/run/pulse:ro \
         -v /home/merus/Desktop/downloads/docker/dosbox:/dosbox \
         --name dosbox \
         tudorh/dosbox:hostpulse

# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# namp and nagios pair
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

docker pull uzyexe/nmap

https://hub.docker.com/r/uzyexe/nmap/

Case 1: Simple Scan
docker run --rm uzyexe/nmap example.com
Case 2 : Port-80 Simple Scan
docker run --rm uzyexe/nmap -p 80 example.com

# added ntp time sync
sudo docker run --restart=on-failure:10 --memory=200MB --cpus=1 -v /home/merus/Desktop/downloads/docker/nmap:/config:rw -v /etc/localtime:/etc/localtime:ro uzyexe/nmap -sS -O -oX 13.0.0.1.xml 13.0.0.1

# with working xml creation
sudo docker run --restart=on-failure:10 --memory=200MB --cpus=1 -v /home/merus/Desktop/downloads/docker/nmap:/config:rw -v /etc/localtime:/etc/localtime:ro uzyexe/nmap -sS -O -oX /config/13.0.0.1.xml 13.0.0.1

# with working xml creation / subnet
sudo docker run --restart=on-failure:10 --memory=200MB --cpus=1 -v /home/merus/Desktop/downloads/docker/nmap:/config:rw -v /etc/localtime:/etc/localtime:ro uzyexe/nmap -sS -O -oX /config/13.0.0.subnet.xml 13.0.0.*

#prod final nmap
sudo docker run -v /home/merus/Desktop/downloads/docker/nmap:/data --rm uzyexe/nmap -v -A -oN /data/output.txt 13.0.0.1


# running nagios
https://hub.docker.com/r/jasonrivers/nagios/

docker pull jasonrivers/nagios

sudo docker run --restart=on-failure:10 --memory=200MB --cpus=1 -v /home/merus/Desktop/downloads/docker/nmap:/config:rw -v /etc/localtime:/etc/localtime:ro jasonrivers/nagios -sS -O -oX /config/13.0.0.subnet.xml 13.0.0.*

# original 
docker run --name nagios4 -v /path-to-nagios/etc/:/opt/nagios/etc/ -v /path-to-nagios/var:/opt/nagios/var/ -v /path-to-custom-plugins:/opt/Custom-Nagios-Plugins -p 0.0.0.0:8080:80 jasonrivers/nagios:latest

sudo docker run -v /etc/localtime:/etc/localtime:ro -v /home/merus/Desktop/downloads/docker/nagios/etc/:/opt/nagios/etc:rw -v /home/merus/Desktop/downloads/docker/nagios/var:/opt/nagios/var:rw -v /home/merus/Desktop/downloads/docker/nagios/Custom-Nagios-Plugins/:/opt/Custom-Nagios-Plugins:rw -p 0.0.0.0:8080:80 jasonrivers/nagios:latest

# prod THIS ONE WORKS
sudo docker run --name=nagios -d -v /etc/localtime:/etc/localtime:ro -v /home/merus/Desktop/downloads/docker/nagios/etc/:/opt/nagios/etc:rw -v /home/merus/Desktop/downloads/docker/nagios/Custom-Nagios-Plugins/:/opt/Custom-Nagios-Plugins:rw -p 0.0.0.0:8080:80 jasonrivers/nagios:latest

sudo docker run --name=nagios --memory=200MB -d -v /etc/localtime:/etc/localtime:ro -v /home/merus/Desktop/downloads/docker/nagios/etc/:/opt/nagios/etc:rw -v /home/merus/Desktop/downloads/docker/nagios/Custom-Nagios-Plugins/:/opt/Custom-Nagios-Plugins:rw -p 0.0.0.0:8080:80 jasonrivers/nagios:latest


Single node usage:

nmap -sS -O -oX 192.168.100.1.xml 192.168.100.1

./nmap2nagios-ng.pl -i -z -r 192.168.100.1.xml -o newhost.cfg
Subnet:

nmap -sS -O -oX subnet.xml 192.168.1.*

./nmap2nagios-ng.pl -i -z -r subnet.xml -o newhosts.cfg

===

# attempt at plugin...original

docker pull opinkerfi/adagios-git

https://hub.docker.com/r/opinkerfi/adagios-git/

docker run -it -p 8080:80 -v ~/code/adagios:/opt/adagios -v ~/code/pynag:/opt/pynag -v ~/code/logs:/var/log/nagios --name adagios opinkerfi/adagios-git:latest

sudo docker run -it -p 8080:80 -v /home/merus/Desktop/downloads/docker/adagios:/opt/adagios -v /home/merus/Desktop/downloads/docker/adagios/pynag:/opt/pynag -v /home/merus/Desktop/downloads/docker/adagios/logs:/var/log/nagios opinkerfi/adagios-git:latest

docker create --name=my-adagios -p 80:80 opinkerfi/adagios-rpm



# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# transmission client
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

docker pull linuxserver/transmission

https://hub.docker.com/r/linuxserver/transmission/

docker create --name=transmission \
-v <path to data>:/config \
-v <path to downloads>:/downloads \
-v <path to watch folder>:/watch \
-e PGID=<gid> -e PUID=<uid> \
-e TZ=<timezone> \
-p 9091:9091 -p 51413:51413 \
-p 51413:51413/udp \
linuxserver/transmission

# access via http://localhost:9091 

# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# pia and transmission client
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

sudo docker pull haugene/transmission-openvpn:latest


docker run --cap-add=NET_ADMIN --device=/dev/net/tun -d \
              -v /your/storage/path/:/data \
              -v /etc/localtime:/etc/localtime:ro \
              -e "OPENVPN_PROVIDER=PIA" \
              -e "OPENVPN_CONFIG=Netherlands" \
              -e "OPENVPN_USERNAME=user" \
              -e "OPENVPN_PASSWORD=pass" \
              --log-driver json-file \
              --log-opt max-size=10m \
              -p 9091:9091 \
              haugene/transmission-openvpn

docker run --cap-add=NET_ADMIN --device=/dev/net/tun -d -v /home/merus/Desktop/downloads/pia/data/:/data -v /etc/localtime:/etc/localtime:ro -e "OPENVPN_PROVIDER=PIA" -e "OPENVPN_CONFIG=Netherlands" -e "OPENVPN_USERNAME=user" -e "OPENVPN_PASSWORD=pass" --log-driver json-file --log-opt max-size=10m -p 9091:9091 haugene/transmission-openvpn

# ----------------------------------------
# experiment  
# create specific images from base ubuntu images 
# ELK stack
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

# remember to increase virtual memory limits
# sysctl vm.max_map_count 
# sysctl -w vm.max_map_count=262144
# sudo docker pull sebp/elk
https://hub.docker.com/r/sebp/elk/
http://elk-docker.readthedocs.io/

# to get to interface
# http://localhost:5601

$ sudo docker run -p 5601:5601 -p 9200:9200 -p 5044:5044 -it --name elk sebp/elk


# ----------------------------------------
# experiment 
# create specific images from base ubuntu images 
# nagios from scratch
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------



# creates a container labelled myname using the image ubuntu and executes the command cat /etc/debian_version
docker run --name myname  ubuntu cat /etc/debian_version

# launches container based on image named ubuntu-updated and runs bash interactively
sudo docker run -h tester.meruslab.org -i -t ubuntu-updated bash
apt-get update
apt-get install sudo 
apt-get install apt-utils
apt-get install net-tools 
exit 

# gets the ID/name of the image after its been run
docker ps -l

# commits the changes you made to the base image to a NEW image labelled ubuntu-updated
sudo docker commit f75ba7ea52ee ubuntu-updated

# launches container based on image named ubuntu-updated and runs bash interactively
sudo docker run -h tester.meruslab.org -i -t ubuntu-updated bash
apt-get install nagios3

# commits the changes you made to the base image to a NEW image labelled ubuntu-nagios
sudo docker commit f75ba7ea52ee ubuntu-nagios

# repeat for each image type

# two approaches
# create dockerfile for each system type to automate creation of files.
# manually create each image type

docker run

sudo docker login -u userid -p password
# identify image ID
sudo docker images
sudo docker tag 036969d45204 josephtrohak/ubuntu-nagios:latest
sudo docker push josephtrohak/ubuntu-nagios:latest
sudo docker tag 9a9e0ffc7f05 josephtrohak/ubuntu-updated:latest
sudo docker push josephtrohak/ubuntu-updated:latest

# you should also run tests against it using selenium and store the test
# then deploy in kube and run tests
# then try to crash it using the kube testing sw




# ----------------------------------------
# experiment 
# create specific images from base ubuntu images 
# mongodb
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------

# find data creator 
http://www.mockaroo.com/
http://www.openwall.com/wordlists/
http://wiki.c2.com/?TestDataGenerator
http://www12.statcan.gc.ca/census-recensement/index-eng.cfm
http://mirrors.kernel.org/openwall/wordlists/

# create an image from a dockerfile
# tag it with the name merus-mongodb2 which will auto populate into the local repository
# and use the filename merus-dockerfile-031217a for the creation of the image creation
sudo docker build -t merus-mongodb2 -f /home/merus/Desktop/experiment-docker-datacenter/mongo-db/merus-dockerfile-031217a . 

# ----------------------------------------
# experiment six
# create specific images from base ubuntu images 
# ldap
# (web JWS, app FUSE, database ORACLE, SQL and CLOUDERA, ldap and AD, nagios, logserver ARCSIGHT LOGLOGIC, jobserver AUTOSYS, feedhub FTP, messaging MQ and SOLACE)
# ----------------------------------------



# set up an ldap server
sudo apt install samba smbldap-tools




# create population of country, addresses, phone numbers, sex, age data, based on census data
# create customer id's; population of 10 million
# create products and services database
# create 100k employee id's and email addresses; including authorizations (6 levels) including SUDO id's and pswds
# create server id's; 100 groups, 10 functional id's per server, 10k servers
# create IP address ranges
# create 100 IT services
# create LDAP and SAMBA server

# http://www.generatedata.com/
# https://kubernetes.io/docs/

# create a samba4 server with an AD domain controller and LDAP
# then populate with 30k userid's and passwords
# include 5000 servers
# include 1000 functional_id's
# create 100 groups: servers, users, server_admin, db_admin, network_admin, storage_admin, app_admin, security_admin, developer, tester-qa, tester-load, employees, managers, directors, senior-directors, vp, svp, sevp, president, audit, tools-admin, 


https://www.tecmint.com/install-samba4-active-directory-ubuntu/

sudo apt-get install samba krb5-user krb5-config winbind libpam-winbind libnss-winbind
make sure kerberos, domain and realm are all the same: meruslab.org

sudo systemctl stop samba-ad-dc.service smbd.service nmbd.service winbind.service
sudo systemctl disable samba-ad-dc.service smbd.service nmbd.service winbind.service
sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.initial
sudo samba-tool domain provision --use-rfc2307 --interactive
password: somethingnice

sudo mv /etc/krb5.conf /etc/krb5.conf.initial
sudo ln –s /var/lib/samba/private/krb5.conf /etc/
ls -l /etc/krb5.conf

sudo netstat –tulpn| egrep ‘smbd|samba’
# doesn't work :(

sudo samba-tool domain level show
response should be:

Domain and forest function level for domain 'DC=meruslab,DC=org'

# ----------------------------------------
# experiment
# online IDE
# based on Eclipe CHE
# 
# ----------------------------------------

# list of online IDE's
# https://github.com/styfle/awesome-online-ide#full-ide
#
# https://www.eclipse.org/che/docs/quick-start.html

# docker run -ti -v /var/run/docker.sock:/var/run/docker.sock -v /local/path:/data eclipse/che start

# to access
# http://172.17.0.1:8080/dashboard/#/


